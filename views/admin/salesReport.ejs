<%- include('../partials/admin/header') %>

<style>
    /* Global Container */
    .card-body {
        background-color: #f8fafc;
        padding: 2rem;
        border-radius: 16px;
        max-width: 100%;
        margin: 2rem auto;
        overflow-x: hidden;
    }

    /* Ensure content doesn't overlap with sidebar */
    @media (min-width: 768px) {
        .card-body {
            margin-left: 250px; /* Adjust this value to match your sidebar width */
        }
    }

    /* Header Section */
    .d-flex.justify-content-between {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        margin-bottom: 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 1rem;
    }

    h4 {
        font-size: 1.5rem;
        font-weight: 600;
        color: #1e293b;
        margin: 0;
    }

    /* Export Buttons */
    .export-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .export-buttons .btn {
        border-radius: 8px;
        padding: 0.75rem 1.25rem;
        font-weight: 500;
        transition: all 0.2s ease;
    }

    /* Date Filter Section */
    .d-flex.justify-content-around {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        margin-bottom: 2rem;
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        justify-content: space-between;
    }

    .form-control {
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 0.625rem;
        transition: border-color 0.2s ease;
        width: 100%;
        max-width: 200px;
    }

    /* Summary Cards */
    .row.mb-4 {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .col-lg-3.col-md-6 {
        width: 100%;
    }

    .card.card-body.mb-4 {
        background: white;
        border: none;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        height: 100%;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .card.card-body.mb-4:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .icontext {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .icon.icon-sm {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
    }

    .text h6 {
        color: #64748b;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
    }

    .text span {
        color: #1e293b;
        font-size: 1.5rem;
        font-weight: 600;
    }

    /* Custom Colors for Icons */
    .bg-primary-light { background-color: #eff6ff; }
    .bg-success-light { background-color: #f0fdf4; }
    .bg-warning-light { background-color: #fefce8; }
    .bg-info-light { background-color: #f0f9ff; }

    .text-primary { color: #3b82f6; }
    .text-success { color: #22c55e; }
    .text-warning { color: #eab308; }
    .text-info { color: #0ea5e9; }



/* Filter Section Styles */
.filter-section {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 1.5rem;
    }

    .filter-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
        justify-content: space-between;
        align-items: center;
    }

    .date-range-select {
        min-width: 200px;
    }

    .date-inputs {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .input-group {
        min-width: 250px;
    }

    .input-group-text {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        color: #6c757d;
        font-weight: 500;
    }

    .form-select, .form-control {
        border: 1px solid #dee2e6;
        padding: 0.5rem;
        border-radius: 6px;
        font-size: 0.95rem;
    }

    /* Summary Cards Styles */
    .summary-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
        gap: 1.5rem;
        margin-top: 1.5rem;
    }

    .summary-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .summary-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    .card-content {
        padding: 1.5rem;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .icon-container {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .card-details {
        flex: 1;
    }

    .card-details h6 {
        color: #6c757d;
        font-size: 0.875rem;
        margin: 0 0 0.5rem 0;
        font-weight: 500;
    }

    .amount {
        font-size: 1.5rem;
        font-weight: 600;
        color: #2d3748;
    }

    /* Custom Colors */
    .bg-primary-light { background-color: #e3f2fd; }
    .bg-success-light { background-color: #e8f5e9; }
    .bg-warning-light { background-color: #fff8e1; }
    .bg-info-light { background-color: #e1f5fe; }

    .text-primary { color: #1976d2; }
    .text-success { color: #2e7d32; }
    .text-warning { color: #f57f17; }
    .text-info { color: #0288d1; }

    /* Responsive Design */
    @media (max-width: 768px) {
        .filter-container {
            flex-direction: column;
            align-items: stretch;
        }

        .date-inputs {
            flex-direction: column;
        }

        .input-group {
            width: 100%;
        }

        .summary-cards {
            grid-template-columns: 1fr;
        }
    }

    /* Table Styles */
    .table-responsive {
        background: white;
        border-radius: 12px;
        padding: 1rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        overflow-x: auto;
    }

    .table {
        width: 100%;
        min-width: 800px;
    }

    .table thead th {
        background-color: #f8fafc;
        color: #64748b;
        font-weight: 600;
        padding: 1rem;
        border-bottom: 2px solid #e2e8f0;
    }

    .table tbody td {
        padding: 1rem;
        border-bottom: 1px solid #e2e8f0;
        color: #334155;
    }

    /* Pagination */
    .pagination-area {
        margin-top: 2rem;
    }
    .table tbody td ul {
  list-style-type: none;
  padding-left: 0;
  margin-bottom: 0;
}

    .pagination {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: 0.5rem;
        list-style-type: none;
        padding-left: 0;
    }

    .pagination .page-item {
        margin: 0;
    }

    .pagination .page-link {
        border: none;
        border-radius: 8px;
        padding: 0.75rem 1rem;
        color: #64748b;
        transition: all 0.2s ease;
    }

    
    /* Responsive Design */
    @media (max-width: 992px) {
        .card-body {
            padding: 1.5rem;
        }

        .d-flex.justify-content-around {
            flex-direction: column;
        }

        .export-buttons {
            width: 100%;
            justify-content: flex-start;
        }
    }

    @media (max-width: 768px) {
        .row.mb-4 {
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        }

        .table-responsive {
            padding: 0.5rem;
        }

        .table thead th,
        .table tbody td {
            padding: 0.75rem;
            font-size: 0.875rem;
        }
    }
</style>

<div class="card-body">
    <!-- Header section with export buttons -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h4>Sales Report</h4>
        <div class="export-buttons">
            <button class="btn btn-primary me-2" onclick="exportToPDF()">
                <i class="material-icons md-file_download"></i> Export PDF
            </button>
            <button class="btn btn-success" onclick="exportToExcel()">
                <i class="material-icons md-file_download"></i> Export Excel
            </button>
        </div>
    </div>

<!-- Date Filter Section -->
<div class="filter-section mb-4">
    <div class="filter-container">
        <div class="date-range-select">
            <select class="form-select" name="dateRange" id="dateRangeSelect">
                <option value="">Select Date Range</option>
                <option value="today">Today</option>
                <option value="week">This Week</option>
                <option value="month">This Month</option>
                <option value="year">This Year</option>
            </select>
        </div>
        <div class="date-inputs">
            <div class="input-group">
                <!-- <span class="input-group-text">Start Date</span> -->
                <input type="date" id="startDate" name="startDate" class="form-control">
            </div>
            <div class="input-group">
                <!-- <span class="input-group-text">End Date</span> -->
                <input type="date" id="endDate" name="endDate" class="form-control">
            </div>
        </div>
    </div>
</div>

<!-- Summary Cards -->
<div class="summary-cards">
    <div class="summary-card">
        <div class="card-content">
            <div class="icon-container bg-primary-light">
                <i class="material-icons md-monetization_on text-primary"></i>
            </div>
            <div class="card-details">
                <h6>Total Sales</h6>
                <span class="amount">₹<%= typeof totalSales !== 'undefined' ? totalSales.toLocaleString() : '0' %></span>
            </div>
        </div>
    </div>
    
    <div class="summary-card">
        <div class="card-content">
            <div class="icon-container bg-success-light">
                <i class="material-icons md-shopping_bag text-success"></i>
            </div>
            <div class="card-details">
                <h6>Total Orders</h6>
                <span class="amount"><%= count %></span>
            </div>
        </div>
    </div>
    
    <div class="summary-card">
        <div class="card-content">
            <div class="icon-container bg-warning-light">
                <i class="material-icons md-loyalty text-warning"></i>
            </div>
            <div class="card-details">
                <h6>Total Discount</h6>
                <span class="amount">₹<%= typeof totalDiscount !== 'undefined' ? totalDiscount.toLocaleString() : '0' %></span>
            </div>
        </div>
    </div>
    
    <div class="summary-card">
        <div class="card-content">
            <div class="icon-container bg-info-light">
                <i class="material-icons md-person text-info"></i>
            </div>
            <div class="card-details">
                <h6>Total Customers</h6>
                <span class="amount"><%= typeof uniqueCustomers !== 'undefined' ? uniqueCustomers : '0' %></span>
            </div>
        </div>
    </div>
</div>



    <!-- Table section -->
    <div class="table-responsive">
        <table class="table table-hover" id="salesTable">
            <thead>
                <tr>
                    <th>Sl No</th>
                    <th>User Name</th>
                    <th>Products</th>
                    <th>Quantity</th>
                    <th>Date</th>
                    <th>Discount Amount</th>
                    <th>Final Amount</th>
                </tr>
            </thead>
            <tbody>
                <% orders.forEach((order, index) => { %>
                    <tr>
                        <td><%= ((currentPage - 1) * limit) + index + 1 %></td>
                        <td><%= order.user.name %></td>
                        <td>
                            <ul>
                                <% order.orderedItems.forEach(item => { %>
                                    <li><%= item.product.productName %></li>
                                <% }) %>
                            </ul>
                        </td>
                        <td>
                            <ul>
                                <% order.orderedItems.forEach(item => { %>
                                    <li><%= item.quantity %></li>
                                <% }) %>
                            </ul>
                        </td>
                        <td><%= order.createdOn.toLocaleDateString() %></td>
                        <td>₹<%= order.discount.toLocaleString() %></td>
                        <td>₹<%= order.finalAmount.toLocaleString() %></td>
                    </tr>
                <% }) %>
            </tbody>
        </table>
    </div>

    <!-- Pagination section -->
    <div class="pagination-area mt-15 mb-50">
        <nav aria-label="Sales Pagination" class="mt-4">
            <ul class="pagination justify-content-center" id="pagination">
                <!-- Pagination buttons will be dynamically generated -->
            </ul>
        </nav>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.13/jspdf.plugin.autotable.min.js"></script>

<script>
    function exportToPDF() {
        const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');
        const dateRangeSelect = document.getElementById('dateRangeSelect');

        const today = new Date();
        let startDate = startDateInput.value ? new Date(startDateInput.value) : new Date();
        let endDate = endDateInput.value ? new Date(endDateInput.value) : today;

        switch (dateRangeSelect.value) {
            case 'today':
                startDate = new Date(today);
                endDate = new Date(today);
                break;
            case 'week':
                startDate.setDate(today.getDate() - 7);
                break;
            case 'month':
                startDate.setMonth(today.getMonth() - 1);
                break;
            case 'year':
                startDate.setFullYear(today.getFullYear() - 1);
                break;
            default:
                startDate = '';
                endDate = '';
                break;
        }

        if(startDate != ''){
            startDate = startDate.toISOString();
        }
        if(endDate != ''){
            endDate = endDate.toISOString();
        }

        // Ensure the startDate and endDate are in ISO string format for URL parameters
        const params = new URLSearchParams({
            start: startDate,
            end: endDate
        });

        fetch(`/admin/salesReportPDF?${params.toString()}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch the PDF');
                }
                return response.blob();
            })
            .then(blob => {
                // Create a blob URL
                const url = window.URL.createObjectURL(blob);

                // Create a temporary link element
                const a = document.createElement('a');
                a.href = url;
                a.download = 'salesReport.pdf'; // Specify the file name
                document.body.appendChild(a);

                // Trigger the download
                a.click();

                // Cleanup
                a.remove();
                window.URL.revokeObjectURL(url);
            })
            .catch(error => {
                console.error('Error downloading the PDF:', error);
                alert('Failed to download the sales report. Please try again.');
            });
    }

    function exportToExcel() {
        const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');
        const dateRangeSelect = document.getElementById('dateRangeSelect');

        const today = new Date();
        let startDate = startDateInput.value ? new Date(startDateInput.value) : new Date();
        let endDate = endDateInput.value ? new Date(endDateInput.value) : today;

        switch (dateRangeSelect.value) {
            case 'today':
                startDate = new Date(today);
                endDate = new Date(today);
                break;
            case 'week':
                startDate.setDate(today.getDate() - 7);
                break;
            case 'month':
                startDate.setMonth(today.getMonth() - 1);
                break;
            case 'year':
                startDate.setFullYear(today.getFullYear() - 1);
                break;
            default:
                startDate = '';
                endDate = '';
                break;
        }
        if(startDate != ''){
            startDate = startDate.toISOString();
        }
        if(endDate != ''){
            endDate = endDate.toISOString();
        }

        // Ensure the startDate and endDate are in ISO string format for URL parameters
        const params = new URLSearchParams({
            start: startDate,
            end: endDate
        });

        fetch(`/admin/salesReportExcel?${params.toString()}`)
        .then(response => response.blob()) // Get the response as a blob (binary data)
                .then(blob => {
                    // Create a link element to trigger the download
                    const link = document.createElement('a');
                    const url = URL.createObjectURL(blob);
                    link.href = url;
                    link.download = 'generated-file.xlsx'; // Default file name
                    link.click(); // Programmatically click the link to trigger download
                    URL.revokeObjectURL(url); // Clean up the URL object
                })
                .catch(error => {
                    console.error('Error downloading the file:', error);
                });
    }

    const dateRangeFormHtml = `
        <div class="mb-4 d-flex gap-3">
            <div class="input-group" style="width: 200px;">
                <select class="form-control" name="dateRange" id="dateRangeSelect">
                    <option value="">Select Date Range</option>
                    <option value="today">Today</option>
                    <option value="week">This Week</option>
                    <option value="month">This Month</option>
                    <option value="year">This Year</option>
                </select>
            </div>
        </div>`;

    // Replace your existing date filter JavaScript with this updated version
    function initializeDateFilter() {
        const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');
        const table = document.getElementById('salesTable');
        const tbody = table.getElementsByTagName('tbody')[0];
        const rows = tbody.getElementsByTagName('tr');
        const dateRangeSelect = document.getElementById('dateRangeSelect');
        console.log(startDateInput.value);
        console.log('hdhj');
        console.log(endDateInput.value);
        console.log('hdhj');
        console.log(dateRangeSelect.value);

        // Helper function to parse date
        function parseDate(dateStr) {
            const [day,month,year] = dateStr.split('/').map(Number);
            return new Date(year, month - 1, day);
        }

        function formatCurrency(amount) {
            return amount.toLocaleString('en-IN', {
                style: 'currency',
                currency: 'INR',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).replace('INR', '₹');
        }
        let currentPage = 1;
        const itemsPerPage = 10;

        function filterTable(page) {
            const dateRangeSelect = document.getElementById('dateRangeSelect').value;
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;

            const itemsPerPage = 10;

            // Prepare the query parameters
            const params = new URLSearchParams();
            if (dateRangeSelect) params.append('dateRange', dateRangeSelect);
            if (startDate) params.append('startDate', startDate);
            if (endDate) params.append('endDate', endDate);
            params.append('page', page);
            params.append('limit', itemsPerPage);

            // Fetch filtered data from the server
            fetch(`/admin/filterSales?${params.toString()}`)
                .then(response => response.json())
                .then(data => {
                    // Update the table with the filtered data
                    const tableBody = document.querySelector('#salesTable tbody');
                    tableBody.innerHTML = ''; // Clear existing rows

                    data.orders.forEach((order, index) => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${index +1+ (page-1)*10}</td>
                            <td>${order.user.name}</td>
                            <td>
                                <ul>${order.orderedItems.map(item => `<li>${item.product.productName}</li>`).join('')}</ul>
                            </td>
                            <td>
                                <ul>${order.orderedItems.map(item => `<li>${item.quantity}</li>`).join('')}</ul>
                            </td>
                            <td>${new Date(order.createdOn).toLocaleDateString()}</td>
                            <td>₹${order.discount.toLocaleString()}</td>
                            <td>₹${order.finalAmount.toLocaleString()}</td>
                        `;
                        tableBody.appendChild(row);
                    });
                    updatePagination(data.totalPages, page);
                })
                .catch(error => {
                    console.error('Error fetching filtered data:', error);
                    alert('Failed to apply filters. Please try again.');
                });
        }

        function updatePagination(totalPages, currentPage) {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = ''; // Clear existing pagination

            for (let i = 1; i <= totalPages; i++) {
                const pageItem = document.createElement('li');
                pageItem.className = `page-item ${i === currentPage ? 'active' : ''}`;
                const button = document.createElement('button');
                button.className = 'page-link';
                button.textContent = i;
                button.dataset.page = i; // Store the page number in a data attribute

                button.addEventListener('click', () => {
                    filterTable(i); // Call filterTable with the page number
                });

                pageItem.appendChild(button);
                pagination.appendChild(pageItem);
            }
        }

        function handleDateRangeSelection(e) {
            e.preventDefault();

            const today = new Date();
            // today.setHours(0, 0, 0, 0);

            const startDate = new Date(today);

            switch (this.value) {
                case 'today':
                    startDateInput.value = today.toISOString().split('T')[0];
                    endDateInput.value = today.toISOString().split('T')[0];
                    break;
                case 'week':
                    startDate.setDate(today.getDate() - 7);
                    startDateInput.value = startDate.toISOString().split('T')[0];
                    endDateInput.value = today.toISOString().split('T')[0];
                    break;
                case 'month':
                    startDate.setMonth(today.getMonth() - 1);
                    startDateInput.value = startDate.toISOString().split('T')[0];
                    endDateInput.value = today.toISOString().split('T')[0];
                    break;
                case 'year':
                    startDate.setFullYear(today.getFullYear() - 1);
                    startDateInput.value = startDate.toISOString().split('T')[0];
                    endDateInput.value = today.toISOString().split('T')[0];
                    break;
                default:
                    startDateInput.value = '';
                    endDateInput.value = '';
                    break;
            }
            filterTable(1);
        }

        dateRangeSelect.addEventListener('change', handleDateRangeSelection);
        startDateInput.addEventListener('change', filterTable);
        endDateInput.addEventListener('change', filterTable);

        filterTable(1);
    }

    document.addEventListener('DOMContentLoaded', initializeDateFilter);

    // Sales Report Table Management
    document.addEventListener('DOMContentLoaded', () => {
        const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');
        const dateRangeSelect = document.getElementById('dateRangeSelect');
        const itemsPerPage = 10; // Items per page

        // Function to filter and paginate table
        async function filterTable(page = 1) {
            try {
                // Get filter values
                const dateRange = dateRangeSelect.value;
                const startDate = startDateInput.value;
                const endDate = endDateInput.value;

                // Prepare query parameters
                const params = new URLSearchParams({
                    page: page,
                    limit: itemsPerPage
                });

                // Add date filters if they exist
                if (dateRange) params.append('dateRange', dateRange);
                if (startDate) params.append('startDate', startDate);
                if (endDate) params.append('endDate', endDate);

                // Fetch filtered data
                const response = await fetch(`/admin/filterSales?${params.toString()}`);
                if (!response.ok) throw new Error('Failed to fetch data');
                
                const data = await response.json();
                
                // Update table content
                updateTableContent(data.orders, page);
                
                // Update pagination
                updatePagination(data.totalPages, page);
                
                // Update summary cards if the data includes them
                if (data.summary) {
                    updateSummaryCards(data.summary);
                }
            } catch (error) {
                console.error('Error during filtering:', error);
                alert('Failed to filter data. Please try again.');
            }
        }

        // Function to update table content
        function updateTableContent(orders, currentPage) {
            const tableBody = document.querySelector('#salesTable tbody');
            tableBody.innerHTML = ''; // Clear existing rows

            orders.forEach((order, index) => {
                const row = document.createElement('tr');
                
                // Calculate the correct serial number based on pagination
                const serialNumber = ((currentPage - 1) * itemsPerPage) + index + 1;
                
                row.innerHTML = `
                    <td>${serialNumber}</td>
                    <td>${order.user?.name || 'Unknown User'}</td>
                    <td>
                        <ul>
                            ${order.orderedItems.map(item => 
                                `<li>${item.product?.productName || 'Unknown Product'}</li>`
                            ).join('')}
                        </ul>
                    </td>
                    <td>
                        <ul>
                            ${order.orderedItems.map(item => 
                                `<li>${item.quantity || 0}</li>`
                            ).join('')}
                        </ul>
                    </td>
                    <td>${new Date(order.createdOn).toLocaleDateString()}</td>
                    <td>₹${(order.discount || 0).toLocaleString()}</td>
                    <td>₹${(order.finalAmount || 0).toLocaleString()}</td>
                `;
                tableBody.appendChild(row);
            });
        }

        // Function to update pagination
        function updatePagination(totalPages, currentPage) {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            // Add Previous button
            addPaginationButton('Previous', currentPage > 1 ? currentPage - 1 : null);

            // Calculate range of pages to show
            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, currentPage + 2);

            // Always show first page
            if (startPage > 1) {
                addPaginationButton(1);
                if (startPage > 2) {
                    pagination.appendChild(createEllipsis());
                }
            }

            // Add page numbers
            for (let i = startPage; i <= endPage; i++) {
                addPaginationButton(i, i, i === currentPage);
            }

            // Always show last page
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    pagination.appendChild(createEllipsis());
                }
                addPaginationButton(totalPages);
            }

            // Add Next button
            addPaginationButton('Next', currentPage < totalPages ? currentPage + 1 : null);

            function addPaginationButton(text, page = text, isActive = false) {
                const li = document.createElement('li');
                li.className = `page-item ${isActive ? 'active' : ''} ${page === null ? 'disabled' : ''}`;
                
                const button = document.createElement('button');
                button.className = 'page-link';
                button.textContent = text;
                
                if (page !== null) {
                    button.addEventListener('click', () => filterTable(page));
                }
                
                li.appendChild(button);
                pagination.appendChild(li);
            }

            function createEllipsis() {
                const li = document.createElement('li');
                li.className = 'page-item disabled';
                li.innerHTML = '<span class="page-link">...</span>';
                return li;
            }
        }

        // Function to update summary cards
        function updateSummaryCards(summary) {
            if (summary.totalSales) {
                document.querySelector('.total-sales').textContent = 
                    `₹${summary.totalSales.toLocaleString()}`;
            }
            if (summary.totalOrders) {
                document.querySelector('.total-orders').textContent = 
                    summary.totalOrders.toString();
            }
            if (summary.totalDiscount) {
                document.querySelector('.total-discount').textContent = 
                    `₹${summary.totalDiscount.toLocaleString()}`;
            }
            if (summary.totalCustomers) {
                document.querySelector('.total-customers').textContent = 
                    summary.totalCustomers.toString();
            }
        }

        // Function to handle date range selection
        function handleDateRangeSelection() {
            const today = new Date();
            let startDate = new Date(today);

            switch (dateRangeSelect.value) {
                case 'today':
                    startDateInput.value = today.toISOString().split('T')[0];
                    endDateInput.value = today.toISOString().split('T')[0];
                    break;
                case 'week':
                    startDate.setDate(today.getDate() - 7);
                    startDateInput.value = startDate.toISOString().split('T')[0];
                    endDateInput.value = today.toISOString().split('T')[0];
                    break;
                case 'month':
                    startDate.setMonth(today.getMonth() - 1);
                    startDateInput.value = startDate.toISOString().split('T')[0];
                    endDateInput.value = today.toISOString().split('T')[0];
                    break;
                case 'year':
                    startDate.setFullYear(today.getFullYear() - 1);
                    startDateInput.value = startDate.toISOString().split('T')[0];
                    endDateInput.value = today.toISOString().split('T')[0];
                    break;
                default:
                    startDateInput.value = '';
                    endDateInput.value = '';
                    break;
            }
            filterTable(1); // Reset to first page when changing date range
        }

        // Set up event listeners
        dateRangeSelect.addEventListener('change', handleDateRangeSelection);
        startDateInput.addEventListener('change', () => filterTable(1));
        endDateInput.addEventListener('change', () => filterTable(1));

        // Initial load
        filterTable(1);
    });
</script>

<%- include('../partials/admin/footer') %>